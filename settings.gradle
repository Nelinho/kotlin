// modules
include "build-common"
include "compiler"
include "compiler:util"
include "compiler:daemon:daemon-client"
include "compiler:preloader"
include "compiler:compiler-runner"
include "compiler.standalone"
include "core"
include "core:builtins"
include "core:reflection.jvm"
include "core:script.runtime"
include "core:util.runtime"
include "custom-dependencies:protobuf-lite"
include "idea:idea-jps-common"
include "kotlin-script-runtime"
include "kotlin-test:kotlin-test-common"
include "kotlin-test:kotlin-test-jvm"
include "kotlin-test:kotlin-test-junit"
include "kotlin-test:kotlin-test-js"
include "kotlin-stdlib-common"
include "kotlin-stdlib"
include "kotlin-stdlib-js"
include "kotlin-stdlib-jre7"
include "kotlin-stdlib-jre8"
include "kotlin-stdlib:samples"
include "prepare:build.version"
include "prepare:compiler"
//include "prepare:reflect"
//include "prepare:runtime"
include "kotlin-reflect"

rootProject.name = "kotlin"

project(':kotlin-script-runtime').projectDir = "$rootDir/libraries/tools/script-runtime" as File
project(':kotlin-test:kotlin-test-common').projectDir = "$rootDir/libraries/kotlin.test/common" as File
project(':kotlin-test:kotlin-test-jvm').projectDir = "$rootDir/libraries/kotlin.test/jvm" as File
project(':kotlin-test:kotlin-test-junit').projectDir = "$rootDir/libraries/kotlin.test/junit" as File
project(':kotlin-test:kotlin-test-js').projectDir = "$rootDir/libraries/kotlin.test/js" as File
project(':kotlin-stdlib-common').projectDir = "$rootDir/libraries/stdlib/common" as File
project(':kotlin-stdlib').projectDir = "$rootDir/libraries/stdlib" as File
project(':kotlin-stdlib-js').projectDir = "$rootDir/libraries/stdlib/js" as File
project(':kotlin-stdlib-jre7').projectDir = "$rootDir/libraries/stdlib/jre7" as File
project(':kotlin-stdlib-jre8').projectDir = "$rootDir/libraries/stdlib/jre8" as File
project(':kotlin-stdlib:samples').projectDir = "$rootDir/stdlib/samples" as File
project(':kotlin-reflect').projectDir = "$rootDir/libraries/tools/kotlin-reflect" as File

def setBuildFile(ProjectDescriptor project) {
    if (project.projectDir.listFiles().any { file -> file.name == "build.gradle.kts"}) {
        project.buildFileName = "build.gradle.kts"
    }
    project.children.each { p -> setBuildFile(p) }
}

setBuildFile(rootProject)
