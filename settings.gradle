// modules
include "build-common"
include "compiler"
include "compiler:util"
include "compiler:daemon.daemon-common"
include "compiler:daemon.daemon-client"
include "compiler:preloader"
include "compiler:cli.cli-runner"
include "compiler:container"
include "compiler:resolution"
include "compiler:serialization"
include "compiler:frontend"
include "compiler:frontend.java"
include "compiler:frontend.script"
include "compiler:compiler-runner"
include "compiler:cli.cli-common"
include "compiler:ir.tree"
include "compiler:ir.psi2ir"
include "compiler:backend-common"
include "compiler:backend"
include "compiler:plugin-api"
include "compiler:light-classes"
include "compiler:cli"
//include "compiler.tests-common"
include "js:js.ast"
include "js:js.serializer"
include "js:js.parser"
include "js:js.frontend"
include "jps-plugin"
include "compiler.standalone"
include "core"
include "core:builtins"
include "core:reflection.jvm"
include "core:script.runtime"
include "core:util.runtime"
include "custom-dependencies:protobuf-lite"
include "idea:idea-jps-common"
include "idea:formatter"
include "idea:ide-common"
include "idea:idea-core"
include "j2k"
include "plugins:android-extensions-compiler"
include "plugins:android-extensions-jps"
include "plugins:java-model-wrappers"
include "plugins:annotation-processing"
include "plugins:allopen-cli"
include "plugins:noarg-cli"
include "plugins:sam-with-receiver-cli"
include "plugins:source-sections-compiler"
include "kotlin-script-runtime"
include "kotlin-test:kotlin-test-common"
include "kotlin-test:kotlin-test-jvm"
include "kotlin-test:kotlin-test-junit"
include "kotlin-test:kotlin-test-js"
include "kotlin-stdlib-common"
include "kotlin-stdlib"
include "kotlin-stdlib-js"
include "kotlin-stdlib-jre7"
include "kotlin-stdlib-jre8"
include "kotlin-stdlib:samples"
include "prepare:build.version"
include "prepare:compiler"
//include "prepare:reflect"
//include "prepare:runtime"
include "prepare:jps-plugin"
include "prepare:formatter"
include "prepare:ide-common"
include "kotlin-reflect"
include "ant"

rootProject.name = "kotlin"

project(':kotlin-script-runtime').projectDir = "$rootDir/libraries/tools/script-runtime" as File
project(':kotlin-test:kotlin-test-common').projectDir = "$rootDir/libraries/kotlin.test/common" as File
project(':kotlin-test:kotlin-test-jvm').projectDir = "$rootDir/libraries/kotlin.test/jvm" as File
project(':kotlin-test:kotlin-test-junit').projectDir = "$rootDir/libraries/kotlin.test/junit" as File
project(':kotlin-test:kotlin-test-js').projectDir = "$rootDir/libraries/kotlin.test/js" as File
project(':kotlin-stdlib-common').projectDir = "$rootDir/libraries/stdlib/common" as File
project(':kotlin-stdlib').projectDir = "$rootDir/libraries/stdlib" as File
project(':kotlin-stdlib-js').projectDir = "$rootDir/libraries/stdlib/js" as File
project(':kotlin-stdlib-jre7').projectDir = "$rootDir/libraries/stdlib/jre7" as File
project(':kotlin-stdlib-jre8').projectDir = "$rootDir/libraries/stdlib/jre8" as File
project(':kotlin-stdlib:samples').projectDir = "$rootDir/libraries/stdlib/samples" as File
project(':kotlin-reflect').projectDir = "$rootDir/libraries/tools/kotlin-reflect" as File
project(':compiler:cli.cli-common').projectDir = "$rootDir/compiler/cli/cli-common" as File
project(':compiler:cli.cli-runner').projectDir = "$rootDir/compiler/cli/cli-runner" as File
project(':compiler:daemon.daemon-common').projectDir = "$rootDir/compiler/daemon/daemon-common" as File
project(':compiler:daemon.daemon-client').projectDir = "$rootDir/compiler/daemon/daemon-client" as File
project(':compiler:ir.tree').projectDir = "$rootDir/compiler/ir/ir.tree" as File
project(':compiler:ir.psi2ir').projectDir = "$rootDir/compiler/ir/ir.psi2ir" as File
project(':plugins:android-extensions-compiler').projectDir = "$rootDir/plugins/android-extensions/android-extensions-compiler" as File
project(':plugins:android-extensions-jps').projectDir = "$rootDir/plugins/android-extensions/android-extensions-jps" as File
project(':plugins:allopen-cli').projectDir = "$rootDir/plugins/allopen/allopen-cli" as File
project(':plugins:noarg-cli').projectDir = "$rootDir/plugins/noarg/noarg-cli" as File
project(':plugins:sam-with-receiver-cli').projectDir = "$rootDir/plugins/sam-with-receiver/sam-with-receiver-cli" as File
project(':plugins:source-sections-compiler').projectDir = "$rootDir/plugins/source-sections/source-sections-compiler" as File

def setBuildFile(ProjectDescriptor project) {
    if (project.projectDir.listFiles().any { file -> file.name == "build.gradle.kts"}) {
        project.buildFileName = "build.gradle.kts"
    }
    project.children.each { p -> setBuildFile(p) }
}

setBuildFile(rootProject)
