description = 'Kotlin Common Standard Library'

apply plugin: 'kotlin-platform-common'

configurePublishing(project)

// ---- Shared part -------

static def configureJvmProject(Project project) {
    project.configure(project) {
        task sourcesJar(type: Jar, dependsOn: classes) {
            classifier = 'sources'
            from sourceSets.main.kotlin
        }

        tasks.withType(JavaCompile) {
            sourceCompatibility = 1.6
            targetCompatibility = 1.6
            options.fork = true
            options.forkOptions.executable = "${JDK_16}/bin/javac"
        }

        tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
            kotlinOptions.jdkHome = JDK_16
        }

        test {
            executable = "$JDK_16/bin/java"
        }
    }
}

static def manifestAttributes(Manifest manifest, Project project, String component = null) {
    project.configure(manifest) {
        attributes \
                'Implementation-Vendor': 'JetBrains',
                'Implementation-Title': project.archivesBaseName,
                'Implementation-Version': project.version,
                'Build-Jdk': System.getProperty('java.version')

        if (component != null) {
            attributes \
                'Kotlin-Runtime-Component': component,
                'Kotlin-Version': project.kotlin_language_version
        }
    }
}

static def configurePublishing(Project project) {
    project.configure(project) {
        apply plugin: 'maven'
        apply plugin: 'signing'


        signing {
            required { (project.properties["signingRequired"] ?: project.isSonatypeRelease) }
            sign configurations.archives
        }

        signArchives {
            enabled signing.required
        }

        task dist(type: Copy, dependsOn: assemble) {
            rename "-${java.util.regex.Pattern.quote(version)}", ''
            into distLibDir
        }

        uploadArchives {
            def prepareTask = rootProject.preparePublication
            dependsOn prepareTask

            doFirst {
                repositories.mavenDeployer.repository.url = prepareTask.repoUrl
            }

            repositories {
                mavenDeployer {
                    beforeDeployment { MavenDeployment deployment ->
                        if (signing.required)
                            signing.signPom(deployment)
                    }

                    repository(url: prepareTask.repoUrl) {
                        authentication(userName: prepareTask.username, password: prepareTask.password)
                    }
                    pom.project {
                        name "${project.group}:${project.name}"
                        packaging 'jar'
                        // optionally artifactId can be defined here
                        description project.description
                        url 'https://kotlinlang.org/'
                        licenses {
                            license {
                                name 'The Apache License, Version 2.0'
                                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            }
                        }
                        scm {
                            url 'https://github.com/JetBrains/kotlin'
                            connection 'scm:git:https://github.com/JetBrains/kotlin.git'
                            developerConnection 'scm:git:https://github.com/JetBrains/kotlin.git'
                        }
                        developers {
                            developer {
                                name 'Kotlin Team'
                                organization = 'JetBrains'
                                organizationUrl 'https://www.jetbrains.com'
                            }
                        }
                    }
                }
            }
        }

        task publish(dependsOn: uploadArchives)
        task javadocJar(type: Jar) {
            classifier = 'javadoc'
        }
    }

}

def createPreprocessorTask(Project project, def name, def sourceDir, def targetDir, def profile = "JS") {
    return project.tasks.create("preprocessSources$name", JavaExec) {
        inputs.dir(sourceDir)
        outputs.dir(targetDir)
        classpath = project.files(bootstrapCompilerFile)
        main = "org.jetbrains.kotlin.preprocessor.PreprocessorCLI"
        args = [sourceDir, targetDir, profile]
    }
}


// ---- End of hared part -------

ext.commonSrcDir = "${buildDir}/common-sources"

sourceSets {
    main {
        kotlin {
            srcDir 'src'
            srcDir commonSrcDir
        }
    }
}

createPreprocessorTask(project, "Main", "${projectDir}/../src/kotlin", commonSrcDir)

compileKotlinCommon.dependsOn preprocessSourcesMain

/*
// TODO: currently unsupported
compileKotlinCommon {
    kotlinOptions {
        freeCompilerArgs = [
                "-module-name", "${project.name}".toString()
        ]
    }
}
*/

jar {
    manifestAttributes(manifest, project, 'Main')
}


task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.kotlin
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

// TODO: call the "dist" task instead, once we need to publish kotlin-stdlib-common.jar with the compiler distribution
task distCommon(type: Copy) {
    from(jar)
    into "$distDir/common"
    rename "-${java.util.regex.Pattern.quote(version)}", ''
}

dist.dependsOn distCommon
