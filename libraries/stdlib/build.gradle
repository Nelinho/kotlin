description = 'Kotlin Standard Library'

apply plugin: 'kotlin'

// ---- Shared part -------

static def configureJvmProject(Project project) {
    project.configure(project) {
        task sourcesJar(type: Jar, dependsOn: classes) {
            classifier = 'sources'
            from sourceSets.main.kotlin
        }

        tasks.withType(JavaCompile) {
            sourceCompatibility = 1.6
            targetCompatibility = 1.6
            options.fork = true
            options.forkOptions.executable = "${JDK_16}/bin/javac"
        }

        tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
            kotlinOptions.jdkHome = JDK_16
        }

        test {
            executable = "$JDK_16/bin/java"
        }
    }
}

static def manifestAttributes(Manifest manifest, Project project, String component = null) {
    project.configure(manifest) {
        attributes \
                'Implementation-Vendor': 'JetBrains',
                'Implementation-Title': project.archivesBaseName,
                'Implementation-Version': project.version,
                'Build-Jdk': System.getProperty('java.version')

        if (component != null) {
            attributes \
                'Kotlin-Runtime-Component': component,
                'Kotlin-Version': project.kotlin_language_version
        }
    }
}

static def configurePublishing(Project project) {
    project.configure(project) {
        apply plugin: 'maven'
        apply plugin: 'signing'


        signing {
            required { (project.properties["signingRequired"] ?: project.isSonatypeRelease) }
            sign configurations.archives
        }

        signArchives {
            enabled signing.required
        }

        task dist(type: Copy, dependsOn: assemble) {
            rename "-${java.util.regex.Pattern.quote(version)}", ''
            into distLibDir
        }

        uploadArchives {
            def prepareTask = rootProject.preparePublication
            dependsOn prepareTask

            doFirst {
                repositories.mavenDeployer.repository.url = prepareTask.repoUrl
            }

            repositories {
                mavenDeployer {
                    beforeDeployment { MavenDeployment deployment ->
                        if (signing.required)
                            signing.signPom(deployment)
                    }

                    repository(url: prepareTask.repoUrl) {
                        authentication(userName: prepareTask.username, password: prepareTask.password)
                    }
                    pom.project {
                        name "${project.group}:${project.name}"
                        packaging 'jar'
                        // optionally artifactId can be defined here
                        description project.description
                        url 'https://kotlinlang.org/'
                        licenses {
                            license {
                                name 'The Apache License, Version 2.0'
                                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            }
                        }
                        scm {
                            url 'https://github.com/JetBrains/kotlin'
                            connection 'scm:git:https://github.com/JetBrains/kotlin.git'
                            developerConnection 'scm:git:https://github.com/JetBrains/kotlin.git'
                        }
                        developers {
                            developer {
                                name 'Kotlin Team'
                                organization = 'JetBrains'
                                organizationUrl 'https://www.jetbrains.com'
                            }
                        }
                    }
                }
            }
        }

        task publish(dependsOn: uploadArchives)
        task javadocJar(type: Jar) {
            classifier = 'javadoc'
        }
    }

}

// ---- End of hared part -------

configureJvmProject(project)
configurePublishing(project)

sourceSets {
    annotations {
        if(!System.properties.'idea.active') {
            java {
                srcDir "${rootDir}/core/runtime.jvm/src"
                include 'org/jetbrains/annotations/**'
            }
            kotlin {
                exclude '**/*'
            }
        }
    }
    builtins {
        java {
            srcDir "${rootDir}/core/builtins/src"
            srcDir "${rootDir}/core/runtime.jvm/src"
            exclude 'org/jetbrains/annotations/**'
        }
        kotlin {
            srcDir "${rootDir}/core/builtins/src"
            srcDir "${rootDir}/core/runtime.jvm/src"
            exclude 'org/jetbrains/annotations/**'
        }
    }
    main {
        java {
            srcDir 'src'
        }
    }
    test {
        kotlin {
            srcDir 'test'
        }
    }
}

dependencies {
    builtinsCompile group: 'org.jetbrains', name: 'annotations', version:'13.0'
    compile group: 'org.jetbrains', name: 'annotations', version:'13.0'
    compile sourceSets.builtins.output
    
    testCompile project(':kotlin-test:kotlin-test-junit')
}

task originalStdlibJar(type: Jar) {
    baseName = 'original-kotlin-stdlib'
    from sourceSets.main.output
}

jar {
    manifestAttributes(manifest, project, 'Main')
    from("${rootDir}/dist/builtins")
    from sourceSets.builtins.output
}

task distJar(type: Jar) {
    baseName = 'dist-kotlin-stdlib'
    version = null
    manifestAttributes(manifest, project, 'Main')
    from("${rootDir}/dist/builtins")
    from sourceSets.annotations.output
    from sourceSets.builtins.output
    from sourceSets.main.output
}

sourcesJar {
    from "${rootDir}/core/builtins/native"
    from sourceSets.builtins.kotlin
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

dist {
    [distJar, sourcesJar].forEach {
        from(it) {
            rename('dist-', '')
        }
        // legacy
        from(it) {
            rename('dist-', '')
            rename('kotlin-stdlib', 'kotlin-runtime')
        }
    }
    from (configurations.compile) {
        include 'annotations*.jar'
    }
}

compileBuiltinsKotlin {
    kotlinOptions {
        freeCompilerArgs = [
                "-version",
                "-Xallow-kotlin-package",
                "-Xdump-declarations-to", "${buildDir}/runtime-declarations.json",
                "-cp", "${rootDir}/dist/builtins",
                "-module-name", "kotlin-runtime"
        ]
    }
}
compileKotlin {
    kotlinOptions {
        freeCompilerArgs = [
                "-version",
                "-Xallow-kotlin-package",
                "-Xmultifile-parts-inherit",
                "-Xdump-declarations-to", "${buildDir}/stdlib-declarations.json",
                "-module-name", project.name
        ]
    }
}

kotlin.experimental.coroutines 'enable'
